.\" Man page generated from reStructuredText.
.
.TH "CEPH" "8" "December 18, 2014" "dev" "Ceph"
.SH NAME
ceph \- ceph administration tool
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.nf
\fBceph\fP \fBauth\fP \fIadd\fP \fI<entity>\fP {\fI<caps>\fP [\fI<caps>\fP\&...]}
.fi
.sp
.nf
\fBceph\fP \fBauth\fP \fIexport\fP \fI<entity>\fP
.fi
.sp
.nf
\fBceph\fP \fBconfig\-key\fP \fIget\fP \fI<key>\fP
.fi
.sp
.nf
\fBceph\fP \fBmds\fP \fIadd_data_pool\fP \fI<pool>\fP
.fi
.sp
.nf
\fBceph\fP \fBmds\fP \fIgetmap\fP {\fI<int[0\-]>\fP}
.fi
.sp
.nf
\fBceph\fP \fBmon\fP \fIadd\fP \fI<name>\fP <\fIIPaddr[:port]\fP>
.fi
.sp
.nf
\fBceph\fP \fBmon_status\fP
.fi
.sp
.nf
\fBceph\fP \fBosd\fP \fIcreate\fP {\fI<uuid>\fP}
.fi
.sp
.nf
\fBceph\fP \fBosd\fP \fBcrush\fP \fIadd\fP \fI<osdname (id|osd.id)>\fP
.fi
.sp
.sp
\fI<float[0.0\-]>\fP \fI<args>\fP [\fI<args>\fP\&...]
.nf
\fBceph\fP \fBpg\fP \fIforce_create_pg\fP \fI<pgid>\fP
.fi
.sp
.nf
\fBceph\fP \fBpg\fP \fIstat\fP
.fi
.sp
.nf
\fBceph\fP \fBquorum_status\fP
.fi
.sp
.SH DESCRIPTION
.sp
\fBceph\fP is a control utility which is used for manual deployment and maintenance
of a Ceph cluster. It provides a diverse set of commands that allows deployment of
monitors, OSDs, placement groups, MDS and overall maintenance, administration
of the cluster.
.SH COMMANDS
.SS auth
.sp
Manage authentication keys. It is used for adding, removing, exporting
or updating of authentication keys for a particular  entity such as a monitor or
OSD. It uses some additional subcommands.
.sp
Subcommand \fBadd\fP adds authentication info for a particular entity from input
file, or random key if no input given and/or any caps specified in the command.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth add <entity> {<caps> [<caps>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBcaps\fP updates caps for \fBname\fP from caps specified in the command.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth caps <entity> <caps> [<caps>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdel\fP deletes all caps for \fBname\fP\&.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth del <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBexport\fP writes keyring for requested entity, or master keyring if
none given.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth export {<entity>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBget\fP writes keyring file with requested key.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth get <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBget\-key\fP displays requested key.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth get\-key <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBget\-or\-create\fP adds authentication info for a particular entity
from input file, or random key if no input given and/or any caps specified in the
command.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth get\-or\-create <entity> {<caps> [<caps>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBget\-or\-create\-key\fP gets or adds key for \fBname\fP from system/caps
pairs specified in the command.  If key already exists, any given caps must match
the existing caps for that key.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth get\-or\-create\-key <entity> {<caps> [<caps>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBimport\fP reads keyring from input file.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth import
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBlist\fP lists authentication state.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth list
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBprint\-key\fP displays requested key.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth print\-key <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBprint_key\fP displays requested key.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth print_key <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS compact
.sp
Causes compaction of monitor\(aqs leveldb storage.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph compact
.ft P
.fi
.UNINDENT
.UNINDENT
.SS config\-key
.sp
Manage configuration key. It uses some additional subcommands.
.sp
Subcommand \fBget\fP gets the configuration key.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key get <key>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBput\fP puts configuration key and values.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key put <key> {<val>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBexists\fP checks for configuration keys existence.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key exists <key>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBlist\fP lists configuration keys.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key list
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdel\fP deletes configuration key.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key del <key>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS df
.sp
Show cluster\(aqs free space status.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph df
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fsid
.sp
Show cluster\(aqs FSID/UUID.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph fsid
.ft P
.fi
.UNINDENT
.UNINDENT
.SS health
.sp
Show cluster\(aqs health.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph health
.ft P
.fi
.UNINDENT
.UNINDENT
.SS heap
.sp
Show heap usage info (available only if compiled with tcmalloc)
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph heap dump|start_profiler|stop_profiler|release|stats
.ft P
.fi
.UNINDENT
.UNINDENT
.SS injectargs
.sp
Inject configuration arguments into monitor.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph injectargs <injected_args> [<injected_args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS log
.sp
Log supplied text to the monitor log.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph log <logtext> [<logtext>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS mds
.sp
Manage metadata server configuration and administration. It uses some
additional subcommands.
.sp
Subcommand \fBadd_data_pool\fP adds data pool.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds add_data_pool <pool>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBcluster_down\fP takes mds cluster down.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds cluster_down
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBcluster_up\fP brings mds cluster up.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds cluster_up
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBcompat\fP manages compatible features. It uses some additional
subcommands.
.sp
Subcommand \fBrm_compat\fP removes compatible feature.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds compat rm_compat <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBrm_incompat\fP removes incompatible feature.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds compat rm_incompat <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBshow\fP shows mds compatibility settings.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds compat show
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdeactivate\fP stops mds.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds deactivate <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdump\fP dumps information, optionally from epoch.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds dump {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBfail\fP forces mds to status fail.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds fail <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBgetmap\fP gets MDS map, optionally from epoch.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds getmap {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBnewfs\fP makes new filesystem using pools <metadata> and <data>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds newfs <int[0\-]> <int[0\-]> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBremove_data_pool\fP removes data pool.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds remove_data_pool <pool>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBrm\fP removes inactive mds.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds rm <int[0\-]> <name> (type.id)>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBrmfailed\fP removes failed mds.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds rmfailed <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBset_max_mds\fP sets max MDS index.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds set_max_mds <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBset_state\fP sets mds state of <gid> to <numeric\-state>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds set_state <int[0\-]> <int[0\-20]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBsetmap\fP sets mds map; must supply correct epoch number.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds setmap <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBstat\fP shows MDS status.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds stat
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBstop\fP stops mds.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds stop <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBtell\fP sends command to particular mds.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds tell <who> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS mon
.sp
Manage monitor configuration and administration. It uses some additional
subcommands.
.sp
Subcommand \fBadd\fP adds new monitor named <name> at <addr>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon add <name> <IPaddr[:port]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdump\fP dumps formatted monmap (optionally from epoch)
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon dump {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBgetmap\fP gets monmap.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon getmap {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBremove\fP removes monitor named <name>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon remove <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBstat\fP summarizes monitor status.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon stat
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBmon_status\fP reports status of monitors.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon_status
.ft P
.fi
.UNINDENT
.UNINDENT
.SS osd
.sp
Manage OSD configuration and administration. It uses some additional
subcommands.
.sp
Subcommand \fBcreate\fP creates new osd (with optional UUID).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd create {<uuid>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBcrush\fP is used for CRUSH management. It uses some additional
subcommands.
.sp
Subcommand \fBadd\fP adds or updates crushmap position and weight for <name> with
<weight> and location <args>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush add <osdname (id|osd.id)> <float[0.0\-]> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBadd\-bucket\fP adds no\-parent (probably root) crush bucket <name> of
type <type>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush add\-bucket <name> <type>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBcreate\-or\-move\fP creates entry or moves existing entry for <name>
<weight> at/to location <args>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush create\-or\-move <osdname (id|osd.id)> <float[0.0\-]> <args>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
[<args>...]
.sp
Subcommand \fBdump\fP dumps crush map.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush dump
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBlink\fP links existing entry for <name> under location <args>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush link <name> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBmove\fP moves existing entry for <name> to location <args>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush move <name> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBremove\fP removes <name> from crush map (everywhere, or just at
<ancestor>).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush remove <name> {<ancestor>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBreweight\fP change <name>\(aqs weight to <weight> in crush map.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush reweight <name> <float[0.0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBrm\fP removes <name> from crush map (everywhere, or just at
<ancestor>).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rm <name> {<ancestor>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBrule\fP is used for creating crush rules. It uses some additional
subcommands.
.sp
Subcommand \fBcreate\-erasure\fP creates crush rule <name> for erasure coded pool
created with <profile> (default default).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule create\-erasure <name> {<profile>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBcreate\-simple\fP creates crush rule <name> to start from <root>,
replicate across buckets of type <type>, using a choose mode of <firstn|indep>
(default firstn; indep best for erasure pools).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule create\-simple <name> <root> <type> {firstn|indep}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdump\fP dumps crush rule <name> (default all).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule dump {<name>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBlist\fP lists crush rules.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule list
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBls\fP lists crush rules.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBrm\fP removes crush rule <name>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule rm <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBset\fP sets crush map from input file.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush set
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBset\fP with osdname/osd.id update crushmap position and weight
for <name> to <weight> with location <args>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush set <osdname (id|osd.id)> <float[0.0\-]> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBshow\-tunables\fP shows current crush tunables.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush show\-tunables
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBtunables\fP sets crush tunables values to <profile>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush tunables legacy|argonaut|bobtail|firefly|optimal|default
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBunlink\fP unlinks <name> from crush map (everywhere, or just at
<ancestor>).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush unlink <name> {<ancestor>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdeep\-scrub\fP initiates deep scrub on specified osd.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd deep\-scrub <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdown\fP sets osd(s) <id> [<id>...] down.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd down <ids> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdump\fP prints summary of OSD map.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd dump {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBerasure\-code\-profile\fP is used for managing the erasure code
profiles. It uses some additional subcommands.
.sp
Subcommand \fBget\fP gets erasure code profile <name>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd erasure\-code\-profile get <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBls\fP lists all erasure code profiles.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd erasure\-code\-profile ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBrm\fP removes erasure code profile <name>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd erasure\-code\-profile rm <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBset\fP creates erasure code profile <name> with [<key[=value]> ...]
pairs. Add a \-\-force at the end to override an existing profile (IT IS RISKY).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd erasure\-code\-profile set <name> {<profile> [<profile>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBfind\fP find osd <id> in the CRUSH map and shows its location.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd find <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBgetcrushmap\fP gets CRUSH map.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd getcrushmap {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBgetmap\fP gets OSD map.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd getmap {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBgetmaxosd\fP shows largest OSD id.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd getmaxosd
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBin\fP sets osd(s) <id> [<id>...] in.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd in <ids> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBlost\fP marks osd as permanently lost. THIS DESTROYS DATA IF NO
MORE REPLICAS EXIST, BE CAREFUL.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd lost <int[0\-]> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBls\fP shows all OSD ids.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd ls {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBlspools\fP lists pools.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd lspools {<int>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBmap\fP finds pg for <object> in <pool>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd map <poolname> <objectname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBmetadata\fP fetches metadata for osd <id>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd metadata <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBout\fP sets osd(s) <id> [<id>...] out.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd out <ids> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBpause\fP pauses osd.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pause
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBperf\fP prints dump of OSD perf summary stats.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd perf
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBpg\-temp\fP set pg_temp mapping pgid:[<id> [<id>...]] (developers
only).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pg\-temp <pgid> {<id> [<id>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBpool\fP is used for managing data pools. It uses some additional
subcommands.
.sp
Subcommand \fBcreate\fP creates pool.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool create <poolname> <int[0\-]> {<int[0\-]>} {replicated|erasure}
{<erasure_code_profile>} {<ruleset>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdelete\fP deletes pool.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool delete <poolname> {<poolname>} {\-\-yes\-i\-really\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBget\fP gets pool parameter <var>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool get <poolname> size|min_size|crash_replay_interval|pg_num|
pgp_num|crush_ruleset|hit_set_type|hit_set_period|hit_set_count|hit_set_fpp|

ceph osd pool get <poolname> auid|target_max_objects|target_max_bytes

ceph osd pool get <poolname> cache_target_dirty_ratio|cache_target_full_ratio

ceph osd pool get <poolname> cache_min_flush_age|cache_min_evict_age|
erasure_code_profile
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBget\-quota\fP obtains object or byte limits for pool.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool get\-quota <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBmksnap\fP makes snapshot <snap> in <pool>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool mksnap <poolname> <snap>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBrename\fP renames <srcpool> to <destpool>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool rename <poolname> <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBrmsnap\fP removes snapshot <snap> from <pool>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool rmsnap <poolname> <snap>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBset\fP sets pool parameter <var> to <val>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool set <poolname> size|min_size|crash_replay_interval|pg_num|
pgp_num|crush_ruleset|hashpspool|hit_set_type|hit_set_period|

ceph osd pool set <poolname> hit_set_count|hit_set_fpp|debug_fake_ec_pool

ceph osd pool set <poolname> target_max_bytes|target_max_objects

ceph osd pool set <poolname> cache_target_dirty_ratio|cache_target_full_ratio

ceph osd pool set <poolname> cache_min_flush_age

ceph osd pool set <poolname> cache_min_evict_age|auid <val>
{\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBset\-quota\fP sets object or byte limit on pool.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool set\-quota <poolname> max_objects|max_bytes <val>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBstats\fP obtain stats from all pools, or from specified pool.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool stats {<name>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBprimary\-affinity\fP adjust osd primary\-affinity from 0.0 <=<weight>
<= 1.0
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd primary\-affinity <osdname (id|osd.id)> <float[0.0\-1.0]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBprimary\-temp\fP sets primary_temp mapping pgid:<id>|\-1 (developers
only).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd primary\-temp <pgid> <id>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBrepair\fP initiates repair on a specified osd.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd repair <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBreweight\fP reweights osd to 0.0 < <weight> < 1.0.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
osd reweight <int[0\-]> <float[0.0\-1.0]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBreweight\-by\-utilization\fP reweight OSDs by utilization
[overload\-percentage\-for\-consideration, default 120].
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd reweight\-by\-utilization {<int[100\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBrm\fP removes osd(s) <id> [<id>...] in the cluster.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd rm <ids> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBscrub\fP initiates scrub on specified osd.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd scrub <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBset\fP sets <key>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd set pause|noup|nodown|noout|noin|nobackfill|norecover|noscrub|
nodeep\-scrub|notieragent
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBsetcrushmap\fP sets crush map from input file.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd setcrushmap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBsetmaxosd\fP sets new maximum osd value.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd setmaxosd <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBstat\fP prints summary of OSD map.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd stat
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBthrash\fP thrashes OSDs for <num_epochs>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd thrash <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBtier\fP is used for managing tiers. It uses some additional
subcommands.
.sp
Subcommand \fBadd\fP adds the tier <tierpool> (the second one) to base pool <pool>
(the first one).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier add <poolname> <poolname> {\-\-force\-nonempty}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBadd\-cache\fP adds a cache <tierpool> (the second one) of size <size>
to existing pool <pool> (the first one).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier add\-cache <poolname> <poolname> <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBcache\-mode\fP specifies the caching mode for cache tier <pool>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier cache\-mode <poolname> none|writeback|forward|readonly
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBremove\fP removes the tier <tierpool> (the second one) from base pool
<pool> (the first one).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier remove <poolname> <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBremove\-overlay\fP removes the overlay pool for base pool <pool>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier remove\-overlay <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBset\-overlay\fP set the overlay pool for base pool <pool> to be
<overlaypool>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier set\-overlay <poolname> <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBtree\fP prints OSD tree.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tree {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBunpause\fP unpauses osd.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd unpause
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBunset\fP unsets <key>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
osd unset pause|noup|nodown|noout|noin|nobackfill|norecover|noscrub|
nodeep\-scrub|notieragent
.ft P
.fi
.UNINDENT
.UNINDENT
.SS pg
.sp
It is used for managing the placement groups in OSDs. It uses some
additional subcommands.
.sp
Subcommand \fBdebug\fP shows debug info about pgs.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg debug unfound_objects_exist|degraded_pgs_exist
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdeep\-scrub\fP starts deep\-scrub on <pgid>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg deep\-scrub <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdump\fP shows human\-readable versions of pg map (only \(aqall\(aq valid
with plain).
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg dump {all|summary|sum|delta|pools|osds|pgs|pgs_brief}

ceph pg dump {all|summary|sum|delta|pools|osds|pgs|pgs_brief...}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdump_json\fP shows human\-readable version of pg map in json only.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg dump_json {all|summary|sum|pools|osds|pgs[all|summary|sum|pools|
osds|pgs...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdump_pools_json\fP shows pg pools info in json only.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg dump_pools_json
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBdump_stuck\fP shows information about stuck pgs.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg dump_stuck {inactive|unclean|stale|undersized|degraded[inactive|unclean|stale|undersized|degraded...]}
{<int>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBforce_create_pg\fP forces creation of pg <pgid>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg force_create_pg <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBgetmap\fP gets binary pg map to \-o/stdout.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg getmap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBmap\fP shows mapping of pg to osds.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg map <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBrepair\fP starts repair on <pgid>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg repair <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBscrub\fP starts scrub on <pgid>.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg scrub <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBsend_pg_creates\fP triggers pg creates to be issued.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg send_pg_creates
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBset_full_ratio\fP sets ratio at which pgs are considered full.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg set_full_ratio <float[0.0\-1.0]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBset_nearfull_ratio\fP sets ratio at which pgs are considered nearly
full.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg set_nearfull_ratio <float[0.0\-1.0]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Subcommand \fBstat\fP shows placement group status.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg stat
.ft P
.fi
.UNINDENT
.UNINDENT
.SS quorum
.sp
Enter or exit quorum.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph quorum enter|exit
.ft P
.fi
.UNINDENT
.UNINDENT
.SS quorum_status
.sp
Reports status of monitor quorum.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph quorum_status
.ft P
.fi
.UNINDENT
.UNINDENT
.SS report
.sp
Reports full status of cluster, optional title tag strings.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph report {<tags> [<tags>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS scrub
.sp
Scrubs the monitor stores.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph scrub
.ft P
.fi
.UNINDENT
.UNINDENT
.SS status
.sp
Shows cluster status.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph status
.ft P
.fi
.UNINDENT
.UNINDENT
.SS sync force
.sp
Forces sync of and clear monitor store.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph sync force {\-\-yes\-i\-really\-mean\-it} {\-\-i\-know\-what\-i\-am\-doing}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tell
.sp
Sends a command to a specific daemon.
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph tell <name (type.id)> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SH OPTIONS
.INDENT 0.0
.TP
.B \-i infile
will specify an input file to be passed along as a payload with the
command to the monitor cluster. This is only used for specific
monitor commands.
.UNINDENT
.INDENT 0.0
.TP
.B \-o outfile
will write any payload returned by the monitor cluster with its
reply to outfile.  Only specific monitor commands (e.g. osd getmap)
return a payload.
.UNINDENT
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
Use ceph.conf configuration file instead of the default
\fB/etc/ceph/ceph.conf\fP to determine monitor addresses during startup.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-id CLIENT_ID, \-\-user CLIENT_ID
Client id for authentication.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-name CLIENT_NAME, \-n CLIENT_NAME
Client name for authentication.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cluster CLUSTER
Name of the Ceph cluster.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-admin\-daemon ADMIN_SOCKET
Submit admin\-socket commands.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-admin\-socket ADMIN_SOCKET_NOPE
You probably mean \-\-admin\-daemon
.UNINDENT
.INDENT 0.0
.TP
.B \-s, \-\-status
Show cluster status.
.UNINDENT
.INDENT 0.0
.TP
.B \-w, \-\-watch
Watch live cluster changes.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-debug
Watch debug events.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-info
Watch info events.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-sec
Watch security events.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-warn
Watch warning events.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-error
Watch error events.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-version, \-v
Display version.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-verbose
Make verbose.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-concise
Make less verbose.
.UNINDENT
.INDENT 0.0
.TP
.B \-f {json,json\-pretty,xml,xml\-pretty,plain}, \-\-format
Format of output.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-connect\-timeout CLUSTER_TIMEOUT
Set a timeout for connecting to the cluster.
.UNINDENT
.SH AVAILABILITY
.sp
\fBceph\fP is part of Ceph, a massively scalable, open-source, distributed storage system. Please refer to
the Ceph documentation at \fI\%http://ceph.com/docs\fP for more information.
.SH SEE ALSO
.sp
\fBceph\-mon\fP(8),
\fBceph\-osd\fP(8),
\fBceph\-mds\fP(8)
.SH COPYRIGHT
2010-2014, Inktank Storage, Inc. and contributors. Licensed under Creative Commons BY-SA
.\" Generated by docutils manpage writer.
.
